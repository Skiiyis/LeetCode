//ËÆæËÆ°‰∏Ä‰∏™ÁÆóÊ≥ïÔºåÊâæÂá∫Êï∞ÁªÑ‰∏≠ÊúÄÂ∞èÁöÑk‰∏™Êï∞„ÄÇ‰ª•‰ªªÊÑèÈ°∫Â∫èËøîÂõûËøôk‰∏™Êï∞ÂùáÂèØ„ÄÇ
//
// Á§∫‰æãÔºö 
//
// ËæìÂÖ•Ôºö arr = [1,3,5,7,2,4,6,8], k = 4
//ËæìÂá∫Ôºö [1,2,3,4]
// 
//
// ÊèêÁ§∫Ôºö 
//
// 
// 0 <= len(arr) <= 100000 
// 0 <= k <= min(100000, len(arr)) 
// 
// Related Topics Â†Ü ÊéíÂ∫è ÂàÜÊ≤ªÁÆóÊ≥ï 
// üëç 34 üëé 0


//leetcode submit region begin(Prohibit modification and deletion)
class Solution {

    fun smallestK(arr: IntArray, k: Int): IntArray {
        if (arr.isEmpty()) return arr
        var start: Int = 0
        var end: Int = arr.size - 1
        while (true) {
            val position = partition(arr, start, end) //4,2,3,5,1 --> 1,2,3,4,5
            when {
                position == k -> return arr.sliceArray(0 until k)
                position > k -> end = position - 1
                position < k -> start = position + 1
                else -> throw Exception("no such case")
            }
        }
    }

    fun partition(arr: IntArray, start: Int = 0, end: Int = arr.size - 1): Int {
        if (start >= end) return end
        var low = start
        var high = end
        val pivot = arr[start]
        var highToLow = true
        while (true) {
            if (highToLow) {
                while (arr[high] > pivot) {
                    if (low == high) return low
                    high--
                }
            } else {
                while (arr[low] <= pivot) {
                    if (low == high) return low
                    low++
                }
            }
            swap(arr, low, high)
            highToLow = !highToLow
        }
    }

    fun swap(arr: IntArray, a: Int, b: Int) {
        val temp = arr[a]
        arr[a] = arr[b]
        arr[b] = temp
    }
}

fun smallestK(arr: IntArray, k: Int): IntArray {
    val ans = ArrayList<Int>()
    arr.forEach {
        val index = binarySearch(ans, it)
        if (index >= 0) {
            ans.add(index, it)
        } else {
            ans.add(-index - 1, it)
        }
        if (ans.size > k) {
            ans.removeAt(ans.size - 1)
        }
    }
    return ans.toIntArray()
}

private fun binarySearch(nums: ArrayList<Int>, target: Int, start: Int = 0, end: Int = nums.size - 1): Int {
    if (start > end) return -start - 1
    val mid = (start + end) / 2
    return when {
        nums[mid] == target -> mid
        nums[mid] > target -> binarySearch(nums, target, start, mid - 1)
        else -> binarySearch(nums, target, mid + 1, end)
    }
}

/*fun main(args: Array<String>) {
    *//*println(Solution().smallestK(
        intArrayOf(1,1,-80,-3,-798,305,-2313,-6,614,0,4458,-2,-11553,-29300,67,4,-9,-2,-3,-42416,19,130,96,-85,0,33959,935,4,5877,-242,-17897,16582,7547,-6,-4,7046,71,58349,65,603,3,168,-65,-8362,-8357,-3,76,-4276,0,59,-934,338,-86,285,5,-59182,8456,-86,1,-35,-58,33078,-8,-33174,-861,111,-5942,-8,-153,-954,9399,75,5202,306,-20960,5143,4,684,7973,49,62,-9313,57555,-2736,8591,-38000,4,-365,11880,13600,859,-48,61169,-8,-14130,743,-7655,610,18854,-3,9444,99,1744,-753,-840,-417,-8797,-433,-26,-752,8725,-643,606,-3375,-39,-8,-63,376,-10658,-182,-7436,-6,9686,251,2994,-247,-62390,-20119,17,-6479,5740,2318,-9,5778,-946,-985,-943,5,308,-63405,-4,-6,-659,-247,-1,6128,4853,253,-3815,324,-14012,-787,-8696,7929,54,-206,-56848,245,-4,-8677,9906,5589,62930,2526,-2577,24302,8,-1,-9,7464,-8390,-8219,45693,-8833,-5,43,2,-5,-2,-1283,-47083,6,2,-41855,-231,19124,19261,25528,-3,-40013,8013,-4908,733,31231,63905,5210,-40656,224,-514,-531,7170,-7,23,178,3010,68,-90,6979,-15,-9909,28474,-4,35,49,-272,-62954,-68,-5,10,-3060,-3435,356,-34,90,0,327,9,32,3570,6252,-9224,692,50370,-24,-4764,4,-755,217,5,5,0,353,-593,701,-32,5,-298,-8342,48476,39,-21,34234,-9,-81,928,62,3237,6,3522,-362,2922,-565,-4478,-90,752,-12958,429,-36,6317,7,9174,363,-221,-53,-25,63,63759,-1478,-60,-59868,19588,25124,-8749,358,-59409,-6,-31,6,7619,2337,-53,-54539,-830,62,-97,57643,34,32217,-3,-8,-59560,-775,-54,-3,-55,-7,5306,8649,820,-33744,-54,551,40,-44,82,-6862,-2,-33155,-47432,-621,2345,-8,930,4277,-194,-9290,-719,6,71,33533,-1,66,-14,-20,0,-3055,-8852,-9,51532,-15983,3,6,-52,62679,-61027,435,8929,5131,4,-47887,6,15903,-6,30384,-73,34092,17635,655,8419,-50,-5467,-61411,2374,80,-88,2574,-3,35,15507,-4,-56497,-533,-10,-32,2,474,4100,-4324,34870,84,22,-250,33614,60072,75,-2449,-46,553,56177,93,-345,833,-963,-4308,-54307,3,-20168,8,-7976,40023,-17,79,-9610,755,-5816,976,9891,19,-4,-73,-6,-8606,-16,29,-774,-48142,-5937,365,-7460,9,2,-247,5107,6173,170,-4446,43440,4462,58,9479,8912,-10,-9,-73,34,-301,863,-42598,2,-4,2,5741,241,620,-986,23857,-3,-464,6,73,416,-7,-453,43779,18765,2035,-406,-744,-7,-13,-4064,-55153,-85,-3,-471,180,30667,-16,4960,0,-8651,61,-3,335,-3,-607,-212,-45,-951,4,575,-5,-1,358,-98,-900,3932,6345,-25038,-89,36095,879,40085,-38523,18,-55825,49302,-15,-8589,-32852,33949,64,-7084,-18,625,-589,21,-9,167,52985,-97,30574,-60985,10,0,-6923,30,1518,6,483,9574,601,-4849,-15241,-48654,-5,-60,7049,-6,20302,295,-7771,-5,847,3158,-16,440,2,50,66,7102,903,1404,0,5782,-1,-809,-38901,50589,32483,334,24,-93,3110,52083,3512,-8289,-9,1960,28607,-49906,5,-813,79,181,55876,95,45065,-1,1786,8445,-464,5,32,35864,53891,72,-636,16749,30240,190,-31119,-58470,-5728,40254,-696,4,35968,-6299,-9,4633,9855,-3070,4,-182,2709,-72,7665,-48159,6,5267,58,0,-5,922,66,-59,-5570,48,49832,-50521,48889,7,9284,-5,24693,4745,-7,-43701,-5,65,-47086,-7,9855,6,487,-8,-6,-3574,-4,-7314,3,-7,-23,-61,-1421,0,3142,-74,181,-3394,48,-699,-9,-132,-2,-5323,6,891,-304,41,0,-49,8766,-9912,77,60418,7320,-10553,7364,65,9,-279,9152,27518,-172,93,892,-17,232,853,-8318,-2,-6120,-262,-58866,6,-196,-18,-53428,-9,-10819,0,-21734,-3,8,-4019,-16209,-3984,25,6,-38,0,9,7,-34655,-53,34816,50365,-108,4164,-8,4812,3,-40,44221,43640,1527,62,9279,-17,80,9828,454,707,8,413,-62,28639,26239,588,61,-7635,46150,2755,-91,-56366,-1,-3,752,-3424,-6,1904,462,-68,1618,-5,5076,-702,-48327,-5,-37787,4661,-76,40608,-1,5357,-6859,43167,10813,-7313,-65201,-2,0,972,47,92,5720,84,31477,-5,49,22504,773,-93,-5,-10,-9834,-2040,-238,-721,69,8689,2995,-416,-860,55,59362,52170,-4551,45046,95,-153,981,9,5,95,34,50123,9095,25716,-5,-14,462,-6595,-9173,841,-1999,682,6,-4219,-49963,38,65441,8426,-15,-8,2,6556,-6,9,-54,-6,5804,75,9,4524,2573,-3610,-58170,-89,-47,1,-1841,673,-7,-9,-3050,1783,644,18015,8053,6831,-42282,-43279,-869,4964,61366,-17,-7,-36,29837,2,-31,-37,447,-25207,862,-31,1,54370,1073,97,-38806,-56,-96,-51604,-8,4,156,464,-39504,0,457,-903,878,-62,-3656,8118,9410,-35856,35,-2,460,974,417,-545,-767,0,3533,-64571,35238,79,95,22,-15,247,4547,62506,0,-164,49138,-500,-86,-385,38,-3331,-460,8,-6,33374,-631,-9465,29,19946,-545,-615,-553,-7,9,731,1,-558,-253,-2,660,138,-2,9330,2001,4,40075,61402,-26),
        135
    ).toList())*//*
    println(
        Solution().smallestK(
            intArrayOf(1, 3, 5, 7, 2, 4, 6, 8),
            4
        ).toList()
    )
}*/

//leetcode submit region end(Prohibit modification and deletion)
